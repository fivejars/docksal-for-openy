#!/usr/bin/env bash

## Initialize a Docksal powered Drupal 7 site
##
## Usage: fin init

# Abort if anything fails
set -e

#-------------------------- Settings --------------------------------

# PROJECT_ROOT is passed from fin.
# The following variables are configured in the '.env' file: DOCROOT, VIRTUAL_HOST.

SITE_DIRECTORY="default"
DOCROOT_PATH="${PROJECT_ROOT}/${DOCROOT}"
SITEDIR_PATH="${DOCROOT_PATH}/sites/${SITE_DIRECTORY}"
SITEDIR_ROSE="${DOCROOT_PATH}/sites/rose"
SITEDIR_LILY="${DOCROOT_PATH}/sites/lily"
SITEDIR_CARNATION="${DOCROOT_PATH}/sites/carnation"

#-------------------------- END: Settings --------------------------------

#-------------------------- Helper functions --------------------------------

# Console colors
red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

is_windows ()
{
	local res=$(uname | grep 'CYGWIN_NT')
	if [[ "$res" != "" ]]; then
		return 0
	else
		return 1
	fi
}

# Copy a settings file.
# Skips if the destination file already exists.
# @param $1 source file
# @param $2 destination file
copy_settings_file()
{
	local source="$1"
	local dest="$2"

	if [[ ! -f $dest ]]; then
		echo "Copying ${dest}..."
		cp $source $dest
	else
		echo-yellow "${dest} already in place."
	fi
}

#-------------------------- END: Helper functions --------------------------------

#-------------------------- Functions --------------------------------

# Fix file/folder permissions
fix_permissions ()
{
	echo-green "Making site directory writable..."
	mkdir -p ${SITEDIR_PATH}/files
	chmod o+w ${SITEDIR_PATH}/files
	mkdir -p ${SITEDIR_ROSE}/files
	chmod o+w ${SITEDIR_ROSE}/files
	mkdir -p ${SITEDIR_LILY}/files
	chmod o+w ${SITEDIR_LILY}/files
	mkdir -p ${SITEDIR_CARNATION}/files
	chmod o+w ${SITEDIR_CARNATION}/files

	mkdir -p ${PROJECT_ROOT}/private_files
	chmod o+w ${PROJECT_ROOT}/private_files

	mkdir -p ${DOCROOT_PATH}/libraries
}

# Initialize local settings files
init_settings ()
{
	DRUPAL_SETTINGS="${PROJECT_ROOT}/.docksal/drupal"

	rm -f ${SITEDIR_PATH}/settings.php
	# Default
	copy_settings_file "${DRUPAL_SETTINGS}/settings.local.php" "${SITEDIR_PATH}/settings.php"
	# Rose
	copy_settings_file "${DRUPAL_SETTINGS}/settings.local.php" "${SITEDIR_ROSE}/settings.php"
	copy_settings_file "${DRUPAL_SETTINGS}/settings.local.rose.php" "${SITEDIR_ROSE}/settings.local.php"
	# Lily
	copy_settings_file "${DRUPAL_SETTINGS}/settings.local.php" "${SITEDIR_LILY}/settings.php"
	copy_settings_file "${DRUPAL_SETTINGS}/settings.local.lily.php" "${SITEDIR_LILY}/settings.local.php"
	# Carnation
	copy_settings_file "${DRUPAL_SETTINGS}/settings.local.php" "${SITEDIR_CARNATION}/settings.php"
	copy_settings_file "${DRUPAL_SETTINGS}/settings.local.carnation.php" "${SITEDIR_CARNATION}/settings.local.php"

	# Mutlisiting configuration
	sed "s/%VIRTUAL_HOST%/${VIRTUAL_HOST}/g" ${DRUPAL_SETTINGS}/sites.php > ${DOCROOT_PATH}/sites/sites.php

	mkdir -p ${PROJECT_ROOT}/drush/aliases
	copy_settings_file "${DRUPAL_SETTINGS}/aliases.drushrc.php" "${PROJECT_ROOT}/drush/aliases/aliases.drushrc.php"
}

# Initialize local settings files
composer_install ()
{
	fin exec "COMPOSER_MEMORY_LIMIT=-1 composer install --no-dev"

	# Workaround for the libraries downloaded from npm-asset
	cd $DOCROOT_PATH/libraries
    for LIBRARY in blazy dropzone slick-carousel jquery.easing; do
        if [[ ! -d "$DOCROOT_PATH/libraries/$LIBRARY" ]]
        then
            echo "Create symlink for $LIBRARY"
            ln -s ../../vendor/npm-asset/$LIBRARY $LIBRARY
        fi
    done
}

# Initialize local settings files
build_js ()
{
	cd ${PROJECT_ROOT}/openy_gated_content/js/gated-content
	fin exec npm install
	fin exec npm run build
}

# Create databases
create_databases ()
{
	for DATABASE in rose lily carnation; do
		fin db create $DATABASE
		fin db cli "GRANT ALL PRIVILEGES ON ${DATABASE}.* TO \"user\"@\"%\""
	done
}

# Import database dump
import_database ()
{
	if [ -z $SKIP_DB_DATA_VOLUME_UPDATE ]; then
		echo "Downloading a fresh data dump..."
		mkdir -p ${DB_DATA_VOLUME_DIR}
		cd ${DB_DATA_VOLUME_DIR}
		echo "Downloading a fresh data volume..."
		time wget -N ${DB_DATA_VOLUME_REMOTE_ROSE}
		time wget -N ${DB_DATA_VOLUME_REMOTE_LILY}
		time wget -N ${DB_DATA_VOLUME_REMOTE_CARNATION}
	fi
	gunzip -c ${DB_DATA_VOLUME_ROSE} | fin db import --db=rose
	gunzip -c ${DB_DATA_VOLUME_LILY} | fin db import --db=lily
	gunzip -c ${DB_DATA_VOLUME_CARNATION} | fin db import --db=carnation
}

# Import database from volume
import_database_from_volume ()
{
	if [ -z $SKIP_DB_DATA_VOLUME_UPDATE ]; then
		cd ${DB_DATA_VOLUME_DIR}
		echo "Downloading a fresh data volume..."
		time wget --http-user=${DUMP_USER} --http-password=${DUMP_PASS} -N ${DB_DATA_VOLUME_REMOTE}
	fi

	# Stop the database container to prevent read/writes during the database
	# restore process.
	echo "Stopping db service container..."
	DB_CONTAINER=`fin docker-compose ps -q db`
	fin docker stop $DB_CONTAINER

	echo "Removing old mysql data..."
	# Remove the /var/lib/mysql contents from the database container.
	fin docker run --rm --volumes-from $DB_CONTAINER debian:stretch-slim rm -rf /var/lib/mysql/*

	echo "Importing db data..."
	fin docker run --rm --interactive --volumes-from $DB_CONTAINER \
		carinamarina/backup restore --destination /var/lib/mysql/ --stdin \
		--zip < $DB_DATA_VOLUME

	echo "Starting db service container..."
	fin docker start $DB_CONTAINER

	echo "Waiting 10s for MySQL to initialize...";
	sleep 10
}

run_updates ()
{
	cd $DOCROOT_PATH

	fin drush cc drush
	for SITE in @rose @lily @carnation; do
		#fin drush $SITE cr
		fin drush $SITE updb -y
	done
}

# Install site
site_install ()
{
	cd $DOCROOT_PATH

	# We disable email sending here so site-install does not return an error
	fin exec "PHP_OPTIONS="'"-d sendmail_path=`which true`"'" drush site-install -y --site-name='My Drupal 8 Site'"
}

# Enable modules
enable_modules ()
{
	cd $DOCROOT_PATH

	echo "Enabling Gated content"
	for SITE in @rose @lily @carnation; do
		fin drush $SITE en -y openy_gc_demo
		fin drush $SITE upwd admin --password=password
	done

	echo "Enabling dev modules"
	for SITE in @rose @lily @carnation; do
		fin drush $SITE en -y devel stage_file_proxy views_ui dblog
	done
}

# Setup additional project configuration.
setup_project ()
{
	cd $DOCROOT_PATH

	# Import demo content.
	for SITE in @rose @lily @carnation; do
		fin drush $SITE mim --group=virtual_y
	done
}

#-------------------------- END: Functions --------------------------------

#-------------------------- Execution --------------------------------

if [[ "$PROJECT_ROOT" == "" ]]; then
	echo-red "\$PROJECT_ROOT is not set"
	exit 1
fi

# Project initialization steps
echo -e "${green_bg} Step 1 ${NC}${green} Initializing local project configuration...${NC}"
fix_permissions
init_settings

if [[ $DOCKER_RUNNING == "true" ]]; then
	echo -e "${green_bg} Step 2 ${NC}${green} Recreating services...${NC}"
	fin reset -f
else
	echo -e "${green_bg} Step 2 ${NC}${green} Creating services...${NC}"
	fin up
fi

echo -e "${green_bg} Step 3 ${NC}${green} Installing vendors...${NC}"
time composer_install

echo -e "${green_bg} Step 4 ${NC}${green} Build JS app...${NC}"
time build_js

echo -e "${green_bg} Step 5 ${NC}${green} Importing the database dump...${NC}"
time create_databases
time import_database
#time import_database_from_volume

echo -e "${green_bg} Step 6 ${NC}${green} Run updates...${NC}"
time run_updates

echo -e "${green_bg} Step 7 ${NC}${green} Enabling modules...${NC}"
time enable_modules

echo -e "${green_bg} Step 8 ${NC}${green} Setup project...${NC}"
time setup_project

if is_windows; then
	echo-green "Add ${VIRTUAL_HOST} to your hosts file (/etc/hosts), e.g.:"
	echo-green "192.168.64.100 ${VIRTUAL_HOST}"
	echo
fi

echo -en "${green_bg} DONE! ${NC} "
echo -e "Open ${yellow}http://${VIRTUAL_HOST}${NC} in your browser to verify the setup."
echo -e "Open ${yellow}http://rose.${VIRTUAL_HOST}${NC} in your browser to verify the setup."
echo -e "Open ${yellow}http://lily.${VIRTUAL_HOST}${NC} in your browser to verify the setup."
echo -e "Open ${yellow}http://carnation.${VIRTUAL_HOST}${NC} in your browser to verify the setup."

#-------------------------- END: Execution --------------------------------

